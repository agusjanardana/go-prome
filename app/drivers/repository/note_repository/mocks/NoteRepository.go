// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "github.com/go-prome/app/drivers/models"
	mock "github.com/stretchr/testify/mock"
)

// NoteRepository is an autogenerated mock type for the NoteRepository type
type NoteRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: note
func (_m *NoteRepository) Create(note models.Note) (models.Note, error) {
	ret := _m.Called(note)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Note) (models.Note, error)); ok {
		return rf(note)
	}
	if rf, ok := ret.Get(0).(func(models.Note) models.Note); ok {
		r0 = rf(note)
	} else {
		r0 = ret.Get(0).(models.Note)
	}

	if rf, ok := ret.Get(1).(func(models.Note) error); ok {
		r1 = rf(note)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: id
func (_m *NoteRepository) DeleteByID(id int) (int64, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *NoteRepository) FindAll() ([]models.Note, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Note, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Note); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *NoteRepository) FindByID(id int) (models.Note, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.Note, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) models.Note); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Note)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: id, note
func (_m *NoteRepository) UpdateByID(id int, note models.Note) (models.Note, error) {
	ret := _m.Called(id, note)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 models.Note
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Note) (models.Note, error)); ok {
		return rf(id, note)
	}
	if rf, ok := ret.Get(0).(func(int, models.Note) models.Note); ok {
		r0 = rf(id, note)
	} else {
		r0 = ret.Get(0).(models.Note)
	}

	if rf, ok := ret.Get(1).(func(int, models.Note) error); ok {
		r1 = rf(id, note)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNoteRepository creates a new instance of NoteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNoteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NoteRepository {
	mock := &NoteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
